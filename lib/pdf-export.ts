import { jsPDF } from 'jspdf';
import { Idea } from '@/types';

export function exportIdeaToPDF(idea: Idea) {
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.getWidth();
  const margin = 20;
  const maxWidth = pageWidth - (margin * 2);
  let yPosition = 20;

  // Title
  doc.setFontSize(20);
  doc.setFont('helvetica', 'bold');
  const titleLines = doc.splitTextToSize(idea.title, maxWidth);
  doc.text(titleLines, margin, yPosition);
  yPosition += titleLines.length * 10 + 5;

  // Metadata badges
  doc.setFontSize(10);
  doc.setFont('helvetica', 'normal');
  if (idea.technology) {
    doc.setFillColor(0, 0, 0);
    doc.setTextColor(255, 255, 255);
    doc.rect(margin, yPosition, 40, 8, 'F');
    doc.text(idea.technology, margin + 2, yPosition + 6);
    yPosition += 10;
  }

  if (idea.complexity) {
    doc.setFillColor(0, 0, 0);
    doc.rect(margin, yPosition, 40, 8, 'F');
    doc.text(idea.complexity, margin + 2, yPosition + 6);
    yPosition += 10;
  }

  yPosition += 5;
  doc.setTextColor(0, 0, 0);

  // Description
  doc.setFontSize(12);
  doc.setFont('helvetica', 'bold');
  doc.text('Description', margin, yPosition);
  yPosition += 8;

  doc.setFont('helvetica', 'normal');
  doc.setFontSize(11);
  const descLines = doc.splitTextToSize(idea.description, maxWidth);
  doc.text(descLines, margin, yPosition);
  yPosition += descLines.length * 6 + 10;

  // Check if we need a new page
  if (yPosition > 250) {
    doc.addPage();
    yPosition = 20;
  }

  // Implementation Steps
  if (idea.implementation_steps && Array.isArray(idea.implementation_steps)) {
    if (yPosition > 250) {
      doc.addPage();
      yPosition = 20;
    }

    doc.setFontSize(12);
    doc.setFont('helvetica', 'bold');
    doc.text('Implementation Steps', margin, yPosition);
    yPosition += 8;

    doc.setFont('helvetica', 'normal');
    doc.setFontSize(11);
    let stepNumber = 1;
    idea.implementation_steps.forEach(step => {
      if (step && step.trim()) {
        if (yPosition > 270) {
          doc.addPage();
          yPosition = 20;
        }
        const stepLines = doc.splitTextToSize(step, maxWidth - 10);
        doc.text(`${stepNumber}.`, margin, yPosition);
        doc.text(stepLines, margin + 8, yPosition);
        yPosition += stepLines.length * 6 + 2;
        stepNumber++;
      }
    });
    yPosition += 8;
  }

  // Tech Stack
  if (idea.tech_stack && Array.isArray(idea.tech_stack)) {
    if (yPosition > 250) {
      doc.addPage();
      yPosition = 20;
    }

    doc.setFontSize(12);
    doc.setFont('helvetica', 'bold');
    doc.text('Tech Stack', margin, yPosition);
    yPosition += 8;

    doc.setFont('helvetica', 'normal');
    doc.setFontSize(11);
    idea.tech_stack.forEach(tech => {
      if (tech && tech.trim()) {
        if (yPosition > 270) {
          doc.addPage();
          yPosition = 20;
        }
        const techLines = doc.splitTextToSize(`• ${tech}`, maxWidth);
        doc.text(techLines, margin, yPosition);
        yPosition += techLines.length * 6 + 2;
      }
    });
    yPosition += 8;
  }

  // Additional Info
  const additionalInfo = [];
  if (idea.time_to_build) {
    additionalInfo.push(`Time to Build: ${idea.time_to_build}`);
  }
  if (idea.monetization) {
    additionalInfo.push(`Monetization: ${idea.monetization}`);
  }
  if (idea.target_audience) {
    additionalInfo.push(`Target Audience: ${idea.target_audience}`);
  }

  if (additionalInfo.length > 0) {
    if (yPosition > 250) {
      doc.addPage();
      yPosition = 20;
    }

    doc.setFontSize(12);
    doc.setFont('helvetica', 'bold');
    doc.text('Additional Information', margin, yPosition);
    yPosition += 8;

    doc.setFont('helvetica', 'normal');
    doc.setFontSize(11);
    additionalInfo.forEach(info => {
      if (yPosition > 280) {
        doc.addPage();
        yPosition = 20;
      }
      const infoLines = doc.splitTextToSize(info, maxWidth);
      doc.text(infoLines, margin, yPosition);
      yPosition += infoLines.length * 6 + 3;
    });
  }

  // Footer
  const pageCount = doc.getNumberOfPages();
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i);
    doc.setFontSize(8);
    doc.setTextColor(128, 128, 128);
    doc.text(
      `Generated by Ideator - Page ${i} of ${pageCount}`,
      pageWidth / 2,
      doc.internal.pageSize.getHeight() - 10,
      { align: 'center' }
    );
  }

  // Save the PDF
  const fileName = `${idea.title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}.pdf`;
  doc.save(fileName);
}

export function exportMultipleIdeasToPDF(ideas: Idea[], title: string = 'My Saved Ideas') {
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.getWidth();
  const margin = 20;
  const maxWidth = pageWidth - (margin * 2);
  let yPosition = 20;

  // Main Title
  doc.setFontSize(24);
  doc.setFont('helvetica', 'bold');
  doc.text(title, margin, yPosition);
  yPosition += 15;

  doc.setFontSize(10);
  doc.setFont('helvetica', 'normal');
  doc.setTextColor(128, 128, 128);
  doc.text(`${ideas.length} ideas | Generated by Ideator`, margin, yPosition);
  yPosition += 15;

  // Reset color
  doc.setTextColor(0, 0, 0);

  ideas.forEach((idea, index) => {
    // Check if we need a new page
    if (yPosition > 250) {
      doc.addPage();
      yPosition = 20;
    }

    // Idea number and title
    doc.setFontSize(16);
    doc.setFont('helvetica', 'bold');
    const ideaTitle = `${index + 1}. ${idea.title}`;
    const titleLines = doc.splitTextToSize(ideaTitle, maxWidth);
    doc.text(titleLines, margin, yPosition);
    yPosition += titleLines.length * 8 + 5;

    // Technology and complexity
    doc.setFontSize(9);
    doc.setFont('helvetica', 'normal');
    const metadata = [idea.technology, idea.complexity].filter(Boolean).join(' • ');
    if (metadata) {
      doc.setTextColor(100, 100, 100);
      doc.text(metadata, margin, yPosition);
      yPosition += 6;
      doc.setTextColor(0, 0, 0);
    }

    // Description
    doc.setFontSize(10);
    const descLines = doc.splitTextToSize(idea.description, maxWidth);
    doc.text(descLines, margin, yPosition);
    yPosition += descLines.length * 5 + 5;

    // Key info
    const keyInfo = [];
    if (idea.time_to_build) keyInfo.push(`Time: ${idea.time_to_build}`);
    if (idea.monetization) keyInfo.push(`Monetization: ${idea.monetization}`);

    if (keyInfo.length > 0) {
      doc.setFontSize(9);
      doc.setTextColor(80, 80, 80);
      doc.text(keyInfo.join(' | '), margin, yPosition);
      yPosition += 6;
      doc.setTextColor(0, 0, 0);
    }

    yPosition += 10;

    // Add separator line
    if (index < ideas.length - 1) {
      doc.setDrawColor(200, 200, 200);
      doc.line(margin, yPosition, pageWidth - margin, yPosition);
      yPosition += 10;
    }
  });

  // Footer
  const pageCount = doc.getNumberOfPages();
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i);
    doc.setFontSize(8);
    doc.setTextColor(128, 128, 128);
    doc.text(
      `Generated by Ideator - Page ${i} of ${pageCount}`,
      pageWidth / 2,
      doc.internal.pageSize.getHeight() - 10,
      { align: 'center' }
    );
  }

  // Save the PDF
  const fileName = `${title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}.pdf`;
  doc.save(fileName);
}
